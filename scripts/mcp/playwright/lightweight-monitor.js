/**
 * ‚ö° ËªΩÈáèÁõ£Ë¶ñ„Çπ„ÇØ„É™„Éó„Éà
 * Playwright‰ΩøÁî®„ÇíÊúÄÂ∞èÈôê„Å´Êäë„Åà„ÅüÁ∂ôÁ∂öÁõ£Ë¶ñ
 */

const { chromium } = require('playwright');

class LightweightMonitor {
  constructor() {
    this.browser = null;
    this.page = null;
    this.isMonitoring = false;
    this.stats = {
      totalChecks: 0,
      errors: 0,
      lastError: null,
      uptime: 0
    };
  }
  
  async initialize() {
    console.log('‚ö° ËªΩÈáèÁõ£Ë¶ñ„Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñ‰∏≠...');
    this.browser = await chromium.launch({ 
      headless: true,
      args: ['--no-sandbox', '--disable-dev-shm-usage'] // „É™„ÇΩ„Éº„ÇπÁØÄÁ¥Ñ
    });
    this.page = await this.browser.newPage();
    
    // „Ç®„É©„ÉºÁõ£Ë¶ñ„ÅÆ„ÅøË®≠ÂÆöÔºà„É≠„Ç∞Áõ£Ë¶ñ„ÅØÁÑ°ÂäπÂåñ„Åó„Å¶„É™„ÇΩ„Éº„ÇπÁØÄÁ¥ÑÔºâ
    this.page.on('console', msg => {
      if (msg.type() === 'error' && msg.text().includes('Runtime Error')) {
        this.stats.errors++;
        this.stats.lastError = msg.text();
        console.log(`üö® [${new Date().toLocaleTimeString()}] Error detected: ${msg.text()}`);
      }
    });
    
    console.log('‚úÖ ËªΩÈáèÁõ£Ë¶ñ„Ç∑„Çπ„ÉÜ„É†Ê∫ñÂÇôÂÆå‰∫Ü');
  }
  
  async quickCheck() {
    if (!this.page) {
      throw new Error('Monitor not initialized');
    }
    
    this.stats.totalChecks++;
    const checkStart = Date.now();
    
    try {
      // Ë∂ÖËªΩÈáè„ÉÅ„Çß„ÉÉ„ÇØÔºö„Éö„Éº„Ç∏„Çø„Ç§„Éà„É´„ÅÆ„ÅøÁ¢∫Ë™ç
      await this.page.goto('http://localhost:4173/', { 
        waitUntil: 'domcontentloaded', 
        timeout: 3000 
      });
      
      const title = await this.page.title();
      const hasLifeSimButton = await this.page.$('button:has-text("ËªΩÈáèLifeSim")') !== null;
      
      const checkTime = Date.now() - checkStart;
      
      return {
        status: hasLifeSimButton ? 'healthy' : 'warning',
        title,
        responseTime: checkTime,
        timestamp: new Date().toISOString()
      };
      
    } catch (error) {
      this.stats.errors++;
      this.stats.lastError = error.message;
      
      return {
        status: 'error',
        error: error.message,
        responseTime: Date.now() - checkStart,
        timestamp: new Date().toISOString()
      };
    }
  }
  
  async startMonitoring(intervalMinutes = 5) {
    if (this.isMonitoring) {
      console.log('‚ö†Ô∏è Êó¢„Å´Áõ£Ë¶ñ‰∏≠„Åß„Åô');
      return;
    }
    
    console.log(`üîÑ Áõ£Ë¶ñÈñãÂßã (${intervalMinutes}ÂàÜÈñìÈöî)`);
    this.isMonitoring = true;
    this.stats.uptime = Date.now();
    
    const monitor = async () => {
      if (!this.isMonitoring) return;
      
      const result = await this.quickCheck();
      const uptimeMinutes = Math.round((Date.now() - this.stats.uptime) / (60 * 1000));
      
      console.log(`üìä [${result.timestamp.split('T')[1].slice(0, 8)}] ${result.status.toUpperCase()} (${result.responseTime}ms) - Á®ºÂÉçÊôÇÈñì: ${uptimeMinutes}ÂàÜ, „ÉÅ„Çß„ÉÉ„ÇØÂõûÊï∞: ${this.stats.totalChecks}, „Ç®„É©„Éº: ${this.stats.errors}`);
      
      // Ê¨°Âõû„ÉÅ„Çß„ÉÉ„ÇØ„Çí„Çπ„Ç±„Ç∏„É•„Éº„É´
      setTimeout(monitor, intervalMinutes * 60 * 1000);
    };
    
    // ÂàùÂõû„ÉÅ„Çß„ÉÉ„ÇØÂÆüË°å
    await monitor();
  }
  
  stopMonitoring() {
    console.log('‚èπÔ∏è Áõ£Ë¶ñÂÅúÊ≠¢');
    this.isMonitoring = false;
  }
  
  getStats() {
    const uptimeMinutes = Math.round((Date.now() - this.stats.uptime) / (60 * 1000));
    return {
      ...this.stats,
      uptimeMinutes,
      errorRate: this.stats.totalChecks > 0 ? (this.stats.errors / this.stats.totalChecks * 100).toFixed(1) + '%' : '0%'
    };
  }
  
  async cleanup() {
    this.stopMonitoring();
    if (this.browser) {
      await this.browser.close();
      console.log('üßπ „É™„ÇΩ„Éº„Çπ„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„ÉóÂÆå‰∫Ü');
    }
  }
}

// CLI‰ΩøÁî®„ÅÆÂ†¥Âêà
if (require.main === module) {
  const args = process.argv.slice(2);
  const command = args[0] || 'monitor';
  const interval = parseInt(args[1]) || 5;
  
  if (command === '--help') {
    console.log(`
‚ö° ËªΩÈáèÁõ£Ë¶ñ„Çπ„ÇØ„É™„Éó„Éà‰ΩøÁî®ÊñπÊ≥ï:

Âü∫Êú¨Áõ£Ë¶ñ:
  node lightweight-monitor.js                    # 5ÂàÜÈñìÈöî„ÅßÁõ£Ë¶ñÈñãÂßã
  node lightweight-monitor.js monitor 3          # 3ÂàÜÈñìÈöî„ÅßÁõ£Ë¶ñÈñãÂßã
  
„ÉØ„É≥„Ç∑„Éß„ÉÉ„Éà:
  node lightweight-monitor.js check              # 1Âõû„ÅÆ„Åø„ÉÅ„Çß„ÉÉ„ÇØÂÆüË°å

ÁâπÂæ¥:
- ÊúÄÂ∞èÈôê„ÅÆ„É™„ÇΩ„Éº„Çπ‰ΩøÁî®
- „Éñ„É©„Ç¶„Ç∂„Ç§„É≥„Çπ„Çø„É≥„ÇπÂÜçÂà©Áî®
- „Ç®„É©„ÉºÁô∫ÁîüÊôÇ„ÅÆ„ÅøË©≥Á¥∞Âá∫Âäõ
- Áµ±Ë®àÊÉÖÂ†±„ÅÆËá™ÂãïÂèéÈõÜ
    `);
    process.exit(0);
  }
  
  const monitor = new LightweightMonitor();
  
  // Graceful shutdown
  process.on('SIGINT', async () => {
    console.log('\nüõë „Ç∑„É£„ÉÉ„Éà„ÉÄ„Ç¶„É≥‰∏≠...');
    const stats = monitor.getStats();
    console.log('üìà ÊúÄÁµÇÁµ±Ë®à:', JSON.stringify(stats, null, 2));
    await monitor.cleanup();
    process.exit(0);
  });
  
  (async () => {
    await monitor.initialize();
    
    if (command === 'check') {
      const result = await monitor.quickCheck();
      console.log('ÁµêÊûú:', JSON.stringify(result, null, 2));
      await monitor.cleanup();
    } else {
      await monitor.startMonitoring(interval);
    }
  })().catch(error => {
    console.error('‚ùå „Ç®„É©„Éº:', error.message);
    process.exit(1);
  });
}

module.exports = LightweightMonitor;