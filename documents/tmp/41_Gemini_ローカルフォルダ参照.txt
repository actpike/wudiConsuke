ご質問ありがとうございます。 その拡張機能「ローカルファイルリンク有効化」の仕組みと、同様の機能の実装方法についてですね。これは非常に良い質問で、Chrome拡張機能のセキュリティモデルを理解する上で良い例になります。

この拡張機能はどういう仕組みか？
結論から言うと、この拡張機能は 「ユーザーが手動で与えた特別な権限」を利用して、file:/// リンクのクリックを検知し、ブラウザのAPIを使って強制的にそのURLに遷移させる という仕組みで動作しています。

通常のWebページ（httpやhttps）からローカルファイル（file:///）へのリンクは、セキュリティ上の理由からChromeによってブロックされます。しかし、Chrome拡張機能は、ユーザーの許可を得ることでこの制約を乗り越えることができます。

この拡張機能の動作フローは、おそらく以下のようになっています。

前提条件: ユーザーが拡張機能の管理ページ(chrome://extensions)で、この拡張機能に対して**「ファイルのURLへのアクセスを許可する」をオン**にしている。ストアページの説明にも記載がある通り、これが最も重要なポイントです。
リンクの監視: content_script を使って、表示されたWebページ内のすべての a タグを監視します。
クリックイベントの横取り: file:/// で始まるリンクがクリックされたとき、拡張機能はそのクリックイベントを「横取り」します（event.preventDefault()）。これにより、ブラウザのデフォルトの（何も起こらない）動作がキャンセルされます。
バックグラウンドへの通知: 横取りしたイベントからリンク先のURL（例: file:///C:/Users/user/Desktop/index.html）を取得し、バックグラウンドスクリプトにメッセージとして送信します。
タブのURLを書き換え: バックグラウンドスクリプトは、メッセージで受け取ったURLを使い、chrome.tabs.update() APIを呼び出します。これにより、現在のタブのURLが強制的にローカルファイルのパスに書き換えられ、結果としてファイルが開かれます。
この一連の流れは、「ファイルのURLへのアクセスを許可する」がオンになっていて初めて可能になります。この許可がないと、ステップ5の chrome.tabs.update() が失敗します。

同様の機能を実装する方法
それでは、この仕組みをManifest V3で実装するための具体的なコードを見ていきましょう。

1. manifest.json の設定
まず、拡張機能の設計図であるマニフェストファイルを作成します。

json
 Show full code block 
{
  "manifest_version": 3,
  "name": "My Local Link Opener",
  "version": "1.0",
  "description": "Opens file:// links from web pages.",
  "permissions": [
    "tabs"
  ],
  "host_permissions": [
    "<all_urls>"
  ],
  "background": {
    "service_worker": "background.js"
  },
  "content_scripts": [
    {
      "matches": ["<all_urls>"],
      "js": ["content.js"],
      "run_at": "document_idle"
    }
  ],
  "icons": {
    "128": "icon128.png"
  }
}
"permissions": ["tabs"]: chrome.tabs.update() を使用してタブのURLを書き換えるために必要です。
"host_permissions": ["<all_urls>"]: すべてのWebページで動作させるために必要です。
"background": バックグラウンド処理を行うサービスワーカーを指定します。
"content_scripts": Webページに挿入するJavaScript（content.js）を指定します。"run_at": "document_idle" は、ページの読み込みがほぼ完了してからスクリプトを実行するための設定です。
2. content.js (コンテンツスクリプト)
このスクリプトはWebページに挿入され、リンクのクリックを監視します。

javascript
 Show full code block 
// content.js

function handleLocalLink(event) {
  // クリックされた要素が 'a' タグで、hrefが 'file://' で始まるか確認
  const link = event.target.closest('a[href^="file://"]');

  if (link) {
    // デフォルトのリンク動作をキャンセル
    event.preventDefault();

    const url = link.href;
    console.log('Local link clicked:', url);

    // バックグラウンドスクリプトにURLを送信
    chrome.runtime.sendMessage({ action: 'openLocalLink', url: url });
  }
}

// ドキュメント全体でクリックイベントを監視（動的に追加されるリンクにも対応）
document.addEventListener('click', handleLocalLink, true);

console.log('Local link handler activated.');
document.addEventListener('click', ...): ページ全体のクリックを監視します。これにより、後からJavaScriptで動的に追加されたリンクにも対応できます。
event.target.closest(...): クリックされた要素、またはその親要素に条件に合う <a> タグがないか探します。
event.preventDefault(): ブラウザがリンクを処理しようとするのを止めます。
chrome.runtime.sendMessage(...): バックグラウンドスクリプトに処理を依頼します。コンテンツスクリプト自体にはタブを操作する権限がないため、この連携が必須です。
3. background.js (バックグラウンドスクリプト)
コンテンツスクリプトからメッセージを受け取り、実際のタブ操作を行います。

javascript
 Show full code block 
// background.js

chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  if (request.action === 'openLocalLink') {
    // 送信元のタブIDを取得
    const tabId = sender.tab.id;
    
    // タブのURLを書き換える
    chrome.tabs.update(tabId, { url: request.url })
      .then(() => {
        console.log(`Tab ${tabId} updated to ${request.url}`);
        sendResponse({ success: true });
      })
      .catch(err => {
        console.error('Failed to update tab:', err);
        // ここでエラーが発生する場合、ほとんどは「ファイルのURLへのアクセスを許可する」がオフになっていることが原因
        
        // ユーザーに設定を促す通知を表示するなどの処理を追加できる
        chrome.notifications.create({
            type: 'basic',
            iconUrl: 'icon128.png',
            title: 'ローカルファイルを開けません',
            message: '拡張機能の管理ページで「ファイルのURLへのアクセスを許可する」をオンにしてください。',
            priority: 2
        });

        sendResponse({ success: false, error: err.message });
      });
    
    // 非同期でsendResponseを呼び出すためtrueを返す
    return true;
  }
});
chrome.runtime.onMessage.addListener: メッセージ受信機です。
sender.tab.id: どのタブからメッセージが送られてきたかを特定します。
chrome.tabs.update(tabId, { url: request.url }): これが機能の核です。指定したタブのURLを、ローカルファイルのパスに書き換えます。
エラー処理: もし chrome.tabs.update が失敗した場合（ユーザーが必要な許可を与えていない場合）、コンソールにエラーを出力し、ユーザーに設定を促す通知を出すような実装を追加すると、より親切な拡張機能になります。（通知を表示するには manifest.json に "notifications" 権限を追加する必要があります。）
拡張機能のテスト方法
上記3つのファイル（と適当なicon128.png）を一つのフォルダに保存します。
Chromeで chrome://extensions/ を開きます。
右上の「デベロッパーモード」をオンにします。
「パッケージ化されていない拡張機能を読み込む」ボタンを押し、作成したフォルダを選択します。
インストールされた拡張機能の「詳細」を開き、「ファイルのURLへのアクセスを許可する」スイッチをオンにします。
ローカルファイルへのリンク（例: <a href="file:///C:/test.txt">Open Test File</a>）を含むHTMLファイルをどこかに作成し、それをブラウザで開いてリンクをクリックし、動作を確認します。